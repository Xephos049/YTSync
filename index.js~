var fs = require('fs');
var http = require('http');
var file = "vidsync.html";
var MongoClient = require('mongodb').MongoClient;
var assert = require('assert');
var ObjectId = require('mongodb').ObjectID;
var mongourl = 'mongodb://localhost:27017/webappdb';
var autoIncrement = require("mongodb-autoincrement");

var insertUrlTest = function(db, callback) {
    db.collection('savedurls').insertOne( {"shorturl": "1", "vid1": "1", "vid2": "1", "off1": "1s", "off2": "1s"}, function(err, result) {
	assert.equal(err, null);
	console.log("test case inserted");
	callback();
});

};

//MongoClient.connect(mongourl, function(err,db) {
//    assert.equal(null, err); 
//    insertUrlTest(db, function() {
//	db.close();
//});

//});

var requestListener = function (req, res) {
  //Determine which of the three types of request this is:
  //1. A save request: Save the parameters as a short url, return short url.
  //2. A short request: retrieve the longer url and return it as a redirect.
  //3. A generic (long) request: return vidsync.html

  var url = require('url').parse(req.url, true);

  //Check for "save" as the request  
  if (/^\/save/.exec(url.pathname)) {
    //Parse the values from the url.
    console.log("Vid1 = " + url.query.vid1 + ", Vid2 = " + url.query.vid2 + ", off1 = " + url.query.off1 + ", off2 = " + url.query.off2);
    //Generate a short url
    var shortUrl = "test";


    //Gets next auto increment integer index from database for the given collection
      MongoClient.connect(url, function(err, db) {
	  autoIncrement.getNextSequence(db, 'counter', function(err, autoIndex) {
	      var collection = db.collection('counter');
	      collection.insert({
		  '-id': autoIndex
		  //, other values to be updated in collection
	      });
	  });
	  
      });

    // and save it to the DB with the values
    var insertShortUrl = function(db, callback) {
	db.collection('savedurls').insertOne( {"shorturl": shortUrl, "vid1": url.query.vid1, "vid2": url.query.vid2, "off1": url.query.off1, "off2": url.query.off2}, 
					      function(err, result) {
						  assert.equal(err, null);
						  console.log("shorturl inserted");
						  callback();
					      });
    };
    MongoClient.connect(mongourl, function(err,db) {
      assert.equal(null, err);
      insertShortUrl(db, function() {
        db.close();
        //Return the short url
        res.writeHead(200);
        res.end(shortUrl);
      });
    });
  }
  //Check for short url
  else if (/^\/\d+$/.exec(url.pathname)) {
    //Parse the short url.
    console.log(url.pathname);

    var curretUrl = "replace with current shorturl";
    //Retrieve the parameters from the DB.
      //function to retrieve data corresponding to currentUrl
    var getShorturlData = function(db, callback) {
	var cursor = db.collection('savedurls').find( {"shorturl": currentUrl });
	cursor.each(function(err, doc) {
	    assert.equal(err, null);
	    if (doc != null) {
		console.dir(doc);
	    } else {
		callback();
	    }
	});
    };
      //call to function to retrieve data corresponding to currentUrl
    MongoClient.connect(url, function(err, db) {
	assert.equal(null, err);
	getShorturlData(db, function() {
	    db.close();
	});
    });
      //still not sure how to take this data and use it below


    //Construct the longer url.
    var redirect = '/';

    //TODO: replace these with values loaded from DB.
    var vid1 = "HnmyYXW5ek8";
    var vid2 = "ohVvgB560Lk"
    var off1 = "3m46s"
    var off2 = "1m10s"

    redirect += "?vid1=" + vid1 + "&vid2=" + vid2 + "&off1=" + off1 + "&off2=" + off2;

    //Return the longer url with response code 302.
    res.writeHead(302, {'Location': redirect});
    res.end();
  }
  //Otherwise, it is a generic long request.
  else {
    //Check if file exists and get its size.
    fs.stat(file, function (err,stats) {
      if (err) {
        res.writeHead(404);
        res.end("File not found!");
        return console.log(err);
      }
      //Open file.
      fs.open(file, 'r', function (err,fd) {
        if (err) {
          res.writeHead(404);
          res.end("File not found!");
          return console.log(err);
        }

        var buffer = new Buffer(stats.size);
        //Read file.
        fs.read(fd, buffer, 0, stats.size, 0, function (err,bytesRead,buffer) {
          if (err) {
            res.writeHead(500);
            res.end("Error reading file!");
            return console.log(err);
          }

          //Write file to response.
          res.writeHead(200);
          res.end(buffer.toString('utf8'));
        });
      });
    });
  }
};

var server = http.createServer(requestListener);
server.listen(process.env.PORT || 8080);
